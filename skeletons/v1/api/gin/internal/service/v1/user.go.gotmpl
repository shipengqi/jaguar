package v1

import (
	"context"

	"github.com/shipengqi/errors"
	"github.com/shipengqi/log"

	"{{ .App.ModuleName }}/internal/store"
	"{{ .App.ModuleName }}/pkg/api/apiserver/v1"
	metav1 "{{ .App.ModuleName }}/pkg/api/meta/v1"
	"{{ .App.ModuleName }}/pkg/code"
)

var _ UserService = &usersvc{}

// UserService defines functions used to handle user request.
type UserService interface {
	Create(ctx context.Context, user *v1.User, opts metav1.CreateOptions) error
	Update(ctx context.Context, user *v1.User, opts metav1.UpdateOptions) error
	Delete(ctx context.Context, username string, opts metav1.DeleteOptions) error
	DeleteList(ctx context.Context, usernames []string, opts metav1.DeleteOptions) error
	Get(ctx context.Context, username string, opts metav1.GetOptions) (*v1.User, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.UserList, error)
	ChangePassword(ctx context.Context, user *v1.User) error
}

type usersvc struct {
	store store.Factory
}

func newUsers(srv *service) *usersvc {
	return &usersvc{store: srv.store}
}

func (u *usersvc) Create(ctx context.Context, user *v1.User, opts metav1.CreateOptions) error {
	if _, err := u.store.Users().Get(ctx, user.Name, metav1.GetOptions{}); err == nil {
		// user already exist
		return errors.Codef(code.ErrUserAlreadyExist, "user %s already exist", user.Name)
	}
	if err := u.store.Users().Create(ctx, user, opts); err != nil {
		return errors.WithCode(err, code.ErrDatabase)
	}
	return nil
}

func (u *usersvc) Update(ctx context.Context, user *v1.User, opts metav1.UpdateOptions) error {
	if err := u.store.Users().Update(ctx, user, opts); err != nil {
		return errors.WithCode(err, code.ErrDatabase)
	}

	return nil
}

func (u *usersvc) Delete(ctx context.Context, username string, opts metav1.DeleteOptions) error {
	if err := u.store.Users().Delete(ctx, username, opts); err != nil {
		return err
	}

	return nil
}

func (u *usersvc) DeleteList(ctx context.Context, usernames []string, opts metav1.DeleteOptions) error {
	if err := u.store.Users().DeleteList(ctx, usernames, opts); err != nil {
		return errors.WithCode(err, code.ErrDatabase)
	}

	return nil
}

func (u *usersvc) Get(ctx context.Context, username string, opts metav1.GetOptions) (*v1.User, error) {
	user, err := u.store.Users().Get(ctx, username, opts)
	if err != nil {
		return nil, err
	}

	return user, nil
}

// List returns user list in the storage.
func (u *usersvc) List(ctx context.Context, opts metav1.ListOptions) (*v1.UserList, error) {
	users, err := u.store.Users().List(ctx, opts)
	if err != nil {
		log.Errorf("list users from storage failed: %s", err.Error())

		return nil, errors.WithCode(err, code.ErrDatabase)
	}

	return users, nil
}

func (u *usersvc) ChangePassword(ctx context.Context, user *v1.User) error {
	// Save changed fields.
	if err := u.store.Users().Update(ctx, user, metav1.UpdateOptions{}); err != nil {
		return errors.WithCode(err, code.ErrDatabase)
	}

	return nil
}
