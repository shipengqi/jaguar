package cache

import "github.com/spf13/pflag"

// Options defines options for redis cluster.
type Options struct {
	Host                  string
	Port                  int
	Addrs                 []string
	MasterName            string
	Username              string
	Password              string
	Database              int
	MaxIdle               int
	MaxActive             int
	Timeout               int
	EnableCluster         bool
	UseTLS                bool
	SSLInsecureSkipVerify bool
}

// NewOptions create an Options with default values.
func NewOptions() *Options {
	return &Options{
		Host:                  "127.0.0.1",
		Port:                  6379,
		Addrs:                 []string{},
		Username:              "",
		Password:              "",
		Database:              0,
		MasterName:            "",
		MaxIdle:               2000,
		MaxActive:             4000,
		Timeout:               0,
		EnableCluster:         false,
		UseTLS:                false,
		SSLInsecureSkipVerify: false,
	}
}

// Validate verifies flags passed to Options.
func (o *Options) Validate() []error {
	return nil
}

// AddFlags adds flags related to redis storage for a specific APIServer to the specified FlagSet.
func (o *Options) AddFlags(fs *pflag.FlagSet) {
	fs.StringVar(&o.Host, "redis.host", o.Host, "Hostname of your Redis server.")
	fs.IntVar(&o.Port, "redis.port", o.Port, "The port the Redis server is listening on.")
	fs.StringSliceVar(&o.Addrs, "redis.addrs", o.Addrs, "A set of redis address(format: 127.0.0.1:6379).")
	fs.StringVar(&o.Username, "redis.username", o.Username, "Username for access to redis service.")
	fs.StringVar(&o.Password, "redis.password", o.Password, "Optional auth password for Redis db.")

	fs.IntVar(&o.Database, "redis.database", o.Database,
		"By default, the database is 0. Setting the database is not supported with redis cluster. "+
			"As such, if you have --redis.enable-cluster=true, then this value should be omitted or explicitly set to 0.")

	fs.StringVar(&o.MasterName, "redis.master-name", o.MasterName, "The name of master redis instance.")

	fs.IntVar(&o.MaxIdle, "redis.optimisation-max-idle", o.MaxIdle,
		"This setting will configure how many connections are maintained in the pool when idle (no traffic). "+
			"Set the --redis.optimisation-max-active to something large, we usually leave it at around 2000 for "+
			"HA deployments.")

	fs.IntVar(&o.MaxActive, "redis.optimisation-max-active", o.MaxActive,
		"In order to not over commit connections to the Redis server, we may limit the total "+
			"number of active connections to Redis. We recommend for production use to set this to around 4000.")

	fs.IntVar(&o.Timeout, "redis.timeout", o.Timeout, "Timeout (in seconds) when connecting to redis service.")

	fs.BoolVar(&o.EnableCluster, "redis.enable-cluster", o.EnableCluster,
		"If you are using Redis cluster, enable it here to enable the slots mode.")

	fs.BoolVar(&o.UseTLS, "redis.use-tls", o.UseTLS,
		"If set, {{ .App.Name }} will assume the connection to Redis is encrypted. "+
			"(use with Redis providers that support in-transit encryption).")

	fs.BoolVar(&o.SSLInsecureSkipVerify, "redis.ssl-insecure-skip-verify", o.SSLInsecureSkipVerify,
		"Allows usage of self-signed certificates when connecting to an encrypted Redis database.")
}
