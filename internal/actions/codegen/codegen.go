package codegen

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/shipengqi/action"

	"github.com/shipengqi/jaguar/internal/actions/codegen/config"
)

const (
	ActionName      = "codegen"
	ActionNameAlias = "cgen"
)

func NewAction(cfg *config.Config) *action.Action {
	act := &action.Action{
		Name: ActionName,
		Run: func(act *action.Action) error {
			g := NewGenerator(cfg.TrimPrefix)

			err := g.parsePackage(cfg.OriginArgs, cfg.BuildTagSlice)
			if err != nil {
				return err
			}

			if !cfg.Doc {
				g.Printf("// Code generated by \"jaguar codegen\"; DO NOT EDIT !!!\n")
				g.Printf("\n")
				g.Printf("package %s", g.pkg.name)
				g.Printf("\n")
			}
			// Run generate for each type.
			var src []byte
			for _, t := range cfg.TypeSlice {
				if cfg.Doc {
					err = g.generateDocs(t)
					src = g.buf.Bytes()
				} else {
					err = g.generate(t)
					// Format the output.
					src = g.format()
				}
				if err != nil {
					return err
				}
			}

			// Write to file.
			outputName := cfg.Output
			if outputName == "" {
				ext := "go"
				if cfg.Doc {
					ext = "md"
				}
				absDir, _ := filepath.Abs(cfg.TargetDir)
				baseName := fmt.Sprintf("%s_generated.%s", strings.ReplaceAll(filepath.Base(absDir), "-", "_"), ext)
				if len(cfg.OriginArgs) == 1 {
					baseName = fmt.Sprintf(
						"%s_generated.%s",
						strings.ReplaceAll(filepath.Base(strings.TrimSuffix(cfg.OriginArgs[0], ".go")), "-", "_"),
						ext,
					)
				}
				outputName = filepath.Join(cfg.TargetDir, strings.ToLower(baseName))
			}
			err = os.WriteFile(outputName, src, 0o600)
			if err != nil {
				return err
			}
			return nil
		},
	}
	return act
}
